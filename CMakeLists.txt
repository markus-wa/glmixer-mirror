project(glmixer) # the name of your project

cmake_minimum_required(VERSION 2.6.0)

FIND_PACKAGE(Subversion)
IF(Subversion_FOUND)
  Subversion_WC_INFO(${PROJECT_SOURCE_DIR} GLMIXER)
  MESSAGE("Current revision is ${GLMIXER_WC_REVISION}")
ENDIF(Subversion_FOUND)

set(GLMIXER_VERSION "1.0")

# Expose CMAKE_INCLUDE_PATH and CMAKE_LIBARY_PATH to the GUI so users
# may set these values without needing to manipulate the environment.
SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} CACHE STRING "You may add additional search paths here. Use ; to separate multiple paths.")
SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} CACHE STRING "You may add additional search paths here. Use ; to separate multiple paths.")

set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Configs" FORCE)
if(DEFINED CMAKE_BUILD_TYPE)
    set_property( CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CMAKE_CONFIGURATION_TYPES} )
endif()

# avoid stupid cmake warning
IF(COMMAND CMAKE_POLICY)
    CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND CMAKE_POLICY)

# force GCC to produce single-line errors for CDT
IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fmessage-length=0 -pipe -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__STDC_CONSTANT_MACROS -fmessage-length=0 -pipe -Wall -Wno-write-strings")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

# force Linker to link with / without console under Windows
IF(WIN32)
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -mingw32 -Wl,-subsystem,console")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -mingw32 -Wl,-subsystem,windows")
ENDIF(WIN32)

# turn on verbose build to enable path autodiscovery in CDT
#SET(CMAKE_VERBOSE_MAKEFILE ON)

# defines used by preprocessor to integrate program version and SVN revision into the application
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGLMIXER_VERSION=${GLMIXER_VERSION}" )
IF(GLMIXER_WC_REVISION)
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGLMIXER_REVISION=${GLMIXER_WC_REVISION}" )
ENDIF(GLMIXER_WC_REVISION)

# HERE ARE THE BASIC DEPENDENCIES
set( CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR} )
find_package( Qt4 REQUIRED)
find_package( OpenGL REQUIRED)
set( GLMIXER_LIBRARIES  ${OPENGL_LIBRARY})

# SOME HINTS FOR THE FIND_LIBRARY BELLOW
set( CMAKE_INCLUDE_PATH 
  /opt/local/include
  /opt/include
  /usr/local/include
  /usr/include
  /mingw/include
  ${CMAKE_SYSTEM_INCLUDE_PATH}
)
set( CMAKE_FIND_LIBRARY_PREFIXES "" lib )
set( CMAKE_FIND_LIBRARY_SUFFIXES .a .dll .lib .lib64 .so .so.0 .framework)
set( CMAKE_LIBRARY_PATH 
  /opt/local/lib
  /opt/lib
  /usr/local/lib
  /usr/lib
  /mingw/bin 
  /mingw/lib 
  ~/Library/Frameworks
  /System/Library/Frameworks
  ${CMAKE_SYSTEM_LIBRARY_PATH}
)

# HERE IS THE OPTIONNAL INSTALLATION OF OPENCV
set(USE_OPENCV false)
find_library( OPENCV_CORE_LIBRARY NAMES opencv_core)
find_library( OPENCV_IMGPROC_LIBRARY NAMES opencv_imgproc)
find_library( OPENCV_HIGHGUI_LIBRARY NAMES opencv_highgui)
# if we find the opencv libs required, then use opencv
if (OPENCV_CORE_LIBRARY AND OPENCV_IMGPROC_LIBRARY AND OPENCV_HIGHGUI_LIBRARY)
	set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${OPENCV_IMGPROC_LIBRARY} ${OPENCV_HIGHGUI_LIBRARY} ${OPENCV_CORE_LIBRARY})
	message(STATUS "OpenCV libraries found")
	
	if( APPLE )
	    SET(USE_QUICKTIME ${USE_QUICKTIME} CACHE BOOL "CHECK if you want to compile with QuickTime library")
	
		if(USE_QUICKTIME)
			find_package( QuickTime REQUIRED)
			set( GLMIXER_LIBRARIES ${GLMIXER_LIBRARIES} ${QUICKTIME_LIBRARY} )
			set(OSX_ARCHITECTURES "i386")
			message(STATUS "Set the variable CMAKE_OSX_ARCHITECTURE to i386 because QuickTime is i386 only.")
		else(USE_QUICKTIME)
			find_library( QTKIT_LIBRARY NAMES QTKit )
			if(QTKIT_LIBRARY)
				set( GLMIXER_LIBRARIES ${GLMIXER_LIBRARIES} ${QTKIT_LIBRARY} )
				message(STATUS "QTKit framework found")
			endif(QTKIT_LIBRARY)
		endif(USE_QUICKTIME)
		find_library( COCOA_LIBRARY NAMES Cocoa )
		find_library( QUARTZCORE_LIBRARY NAMES QuartzCore )
		if (COCOA_LIBRARY AND QUARTZCORE_LIBRARY)
			set( GLMIXER_LIBRARIES ${GLMIXER_LIBRARIES} ${COCOA_LIBRARY} ${QUARTZCORE_LIBRARY}  )
			message(STATUS "OpenCV OSX dependencies found")
			set(USE_OPENCV true)
		endif (COCOA_LIBRARY AND QUARTZCORE_LIBRARY)
	else ( APPLE )
		set(USE_OPENCV true)
	endif ( APPLE )
	
endif (OPENCV_CORE_LIBRARY AND OPENCV_IMGPROC_LIBRARY AND OPENCV_HIGHGUI_LIBRARY)

if (USE_OPENCV)
	message(STATUS "Using OpenCV.")
endif (USE_OPENCV)

# HERE IS THE GLEW DEPENDENCY
find_library( GLEW_LIBRARY NAMES GLEW glew glew32)
if (GLEW_LIBRARY)
  set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${GLEW_LIBRARY} )
  find_path( GLEW_INCLUDE NAMES GL/glew.h )
  include_directories(${GLEW_INCLUDE})
else (GLEW_LIBRARY)
  message(FATAL_ERROR "No GLEW library found.")
endif (GLEW_LIBRARY)

# HERE ARE THE FFMPEG ESSENTIAL AND REQUIRED LIBRARIES

find_library( AVFORMAT_LIBRARY NAMES avformat)
if (AVFORMAT_LIBRARY)
  set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${AVFORMAT_LIBRARY} )
else (AVFORMAT_LIBRARY)
  message(FATAL_ERROR "No avformat library found.")
endif (AVFORMAT_LIBRARY)

find_library( AVCODEC_LIBRARY NAMES avcodec)
if (AVCODEC_LIBRARY)
  set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${AVCODEC_LIBRARY} )
  find_path( FFMPEG_INCLUDE NAMES libavcodec/avcodec.h )
  include_directories(${FFMPEG_INCLUDE})
else (AVCODEC_LIBRARY)
  message(FATAL_ERROR "No avcodec library found.")
endif (AVCODEC_LIBRARY)

find_library( AVUTIL_LIBRARY NAMES avutil)
if (AVUTIL_LIBRARY)
  set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${AVUTIL_LIBRARY} )
else (AVUTIL_LIBRARY)
  message(FATAL_ERROR "No avutil library found.")
endif (AVUTIL_LIBRARY)

find_library( SWSCALE_LIBRARY NAMES swscale)
if (SWSCALE_LIBRARY)
  set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${SWSCALE_LIBRARY} )
else (SWSCALE_LIBRARY)
  message(FATAL_ERROR "No swscale library found.")
endif (SWSCALE_LIBRARY)

find_library( AVCORE_LIBRARY NAMES avcore)
if (AVCORE_LIBRARY)
	set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${AVCORE_LIBRARY} )
endif (AVCORE_LIBRARY)

# BELLOW IS THE LIST OF FFMPEG OPTIONNAL DEPENDENCIES.
# ADD THE LIBRARIES AS REQUIRED BY YOUR INSTALLATION OF FFMPEG

find_library( THEORA_LIBRARY NAMES theora theoraenc theoradec)
if (THEORA_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${THEORA_LIBRARY} )
endif (THEORA_LIBRARY)

find_library( X264_LIBRARY NAMES x264)
if (X264_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${X264_LIBRARY} )
endif (X264_LIBRARY)

find_library( XVID_LIBRARY NAMES xvidcore)
if (XVID_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${XVID_LIBRARY} )
endif (XVID_LIBRARY)

find_library( FAAC_LIBRARY NAMES faac)
if (FAAC_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${FAAC_LIBRARY} )
endif (FAAC_LIBRARY)

find_library( MP3LAME_LIBRARY NAMES mp3lame)
if (MP3LAME_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${MP3LAME_LIBRARY} )
endif (MP3LAME_LIBRARY)

find_library( VORBIS_LIBRARY NAMES vorbis)
if (VORBIS_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${VORBIS_LIBRARY} )
endif (VORBIS_LIBRARY)

find_library( VORBISENC_LIBRARY NAMES vorbisenc)
if (VORBISENC_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${VORBISENC_LIBRARY} )
endif (VORBISENC_LIBRARY)

find_library( OGG_LIBRARY NAMES ogg)
if (OGG_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${OGG_LIBRARY} )
endif (OGG_LIBRARY)

find_library( ORC_LIBRARY NAMES orc-0.4)
if (ORC_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${ORC_LIBRARY} )
endif (ORC_LIBRARY)

find_library( SCHROEDINGER_LIBRARY NAMES schroedinger-1.0)
if (SCHROEDINGER_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${SCHROEDINGER_LIBRARY} )
endif (SCHROEDINGER_LIBRARY)

find_library( SPEEDX_LIBRARY NAMES speex)
if (SPEEDX_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${SPEEDX_LIBRARY} )
endif (SPEEDX_LIBRARY)

find_library( DIRACENC_LIBRARY NAMES dirac_encoder)
if (DIRACENC_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${DIRACENC_LIBRARY} )
endif (DIRACENC_LIBRARY)

#find_library( JPEG_LIBRARY NAMES jpeg)
#if (JPEG_LIBRARY)
#set( GLMIXER_LIBRARIES ${GLMIXER_LIBRARIES} ${JPEG_LIBRARY} )
#endif (JPEG_LIBRARY)

find_library( OPENJPEG_LIBRARY NAMES openjpeg)
if (OPENJPEG_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${OPENJPEG_LIBRARY} )
endif (OPENJPEG_LIBRARY)

find_library( VPX_LIBRARY NAMES vpx)
if (VPX_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${VPX_LIBRARY} )
endif (VPX_LIBRARY)

find_library( BZ2_LIBRARY NAMES bz2)
if (BZ2_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${BZ2_LIBRARY} )
endif (BZ2_LIBRARY)

find_library( Z_LIBRARY NAMES z)
if (Z_LIBRARY)
set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} ${Z_LIBRARY} )
endif (Z_LIBRARY)

# HERE IS THE INSTALLATION WINDOWS SOCK LIB 

if (WIN32)
  set( GLMIXER_LIBRARIES  ${GLMIXER_LIBRARIES} -lws2_32 )
endif (WIN32)

# tell cmake to process CMakeLists.txt in those subdirectories

include(${CMAKE_SOURCE_DIR}/macros.cmake)

add_subdirectory(libQtProperty)
add_subdirectory(src)
